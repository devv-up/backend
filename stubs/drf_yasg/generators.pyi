from typing import Any, Optional


class OpenAPISchemaGenerator:
    endpoint_enumerator_class: Any = ...
    reference_resolver_class: Any = ...
    info: Any = ...
    version: Any = ...
    consumes: Any = ...
    produces: Any = ...

    def __init__(
        self,
        info: Any,
        version: str = ...,
        url: Optional[Any] = ...,
        patterns: Optional[Any] = ...,
        urlconf: Optional[Any] = ...,
    ): ...
    @property
    def url(self) -> Any: ...
    def get_security_definitions(self) -> Any: ...
    def get_security_requirements(self, security_definitions: Any) -> Any: ...
    def get_schema(self, request: Optional[Any] = ..., public: bool = ...) -> Any: ...
    def create_view(self, callback: Any, method: Any, request: Optional[Any] = ...) -> Any: ...
    def coerce_path(self, path: Any, view: Any) -> Any: ...
    def get_endpoints(self, request: Any) -> Any: ...
    def get_operation_keys(self, subpath: Any, method: Any, view: Any) -> Any: ...
    def determine_path_prefix(self, paths: Any) -> Any: ...
    def should_include_endpoint(self, path: Any, method: Any, view: Any, public: Any) -> Any: ...
    def get_paths_object(self, paths: Any) -> Any: ...
    def get_paths(self, endpoints: Any, components: Any, request: Any, public: Any) -> Any: ...
    def get_operation(self, view: Any, path: Any, prefix: Any,
                      method: Any, components: Any, request: Any) -> Any: ...

    def get_path_item(self, path: Any, view_cls: Any, operations: Any) -> Any: ...
    def get_overrides(self, view: Any, method: Any) -> Any: ...
    def get_path_parameters(self, path: Any, view_cls: Any) -> Any: ...
