from typing import Any, Optional


class BaseInspector:
    view: Any = ...
    path: Any = ...
    method: Any = ...
    components: Any = ...
    request: Any = ...
    def __init__(self, view: Any, path: Any, method: Any, components: Any, request: Any): ...
    def process_result(self, result: Any, method_name: Any, obj: Any, **kwargs: Any) -> Any: ...

    def probe_inspectors(
        self, inspectors: Any, method_name: Any, obj: Any,
        initkwargs: Optional[Any] = ..., **kwargs: Any
    ) -> Any: ...
    def get_renderer_classes(self) -> Any: ...
    def get_parser_classes(self) -> Any: ...


class PaginatorInspector(BaseInspector):
    def get_paginator_parameters(self, paginator: Any) -> Any: ...
    def get_paginated_response(self, paginator: Any, response_schema: Any) -> Any: ...


class FilterInspector(BaseInspector):
    def get_filter_parameters(self, filter_backend: Any) -> Any: ...


class FieldInspector(BaseInspector):
    field_inspectors: Any = ...
    def __init__(self, view: Any, path: Any, method: Any, components: Any,
                 request: Any, field_inspectors: Any): ...

    def add_manual_fields(self, serializer_or_field: Any, schema: Any) -> None: ...
    def field_to_swagger_object(self, field: Any, swagger_object_type: Any,
                                use_references: Any, **kwargs: Any) -> Any: ...
    def probe_field_inspectors(self, field: Any, swagger_object_type: Any,
                               use_references: Any, **kwargs: Any) -> Any: ...


class ViewInspector(BaseInspector):
    body_methods: Any = ...
    implicit_body_methods: Any = ...
    implicit_list_response_methods: Any = ...
    field_inspectors: Any = ...
    filter_inspectors: Any = ...
    paginator_inspectors: Any = ...
    overrides: Any = ...
    def __init__(self, view: Any, path: Any, method: Any,
                 components: Any, request: Any, overrides: Any): ...

    def get_operation(self, operation_keys: Any) -> None: ...
    def is_list_view(self) -> Any: ...
    def has_list_response(self) -> Any: ...
    def should_filter(self) -> Any: ...
    def get_filter_parameters(self) -> Any: ...
    def should_page(self) -> Any: ...
    def get_pagination_parameters(self) -> Any: ...
    def serializer_to_schema(self, serializer: Any) -> Any: ...
    def serializer_to_parameters(self, serializer: Any, in_: Any) -> Any: ...
    def get_paginated_response(self, response_schema: Any) -> Any: ...
